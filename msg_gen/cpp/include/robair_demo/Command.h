/* Auto-generated by genmsg_cpp for file /home/simon/groovy_workspace/sandbox/robair_demo/msg/Command.msg */
#ifndef ROBAIR_DEMO_MESSAGE_COMMAND_H
#define ROBAIR_DEMO_MESSAGE_COMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robair_demo
{
template <class ContainerAllocator>
struct Command_ {
  typedef Command_<ContainerAllocator> Type;

  Command_()
  : move(0)
  {
  }

  Command_(const ContainerAllocator& _alloc)
  : move(0)
  {
  }

  typedef int8_t _move_type;
  int8_t move;


  typedef boost::shared_ptr< ::robair_demo::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robair_demo::Command_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Command
typedef  ::robair_demo::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::robair_demo::Command> CommandPtr;
typedef boost::shared_ptr< ::robair_demo::Command const> CommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robair_demo::Command_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robair_demo::Command_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robair_demo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robair_demo::Command_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robair_demo::Command_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robair_demo::Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f5105fdd0c74f51939677182bb6cf00";
  }

  static const char* value(const  ::robair_demo::Command_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f5105fdd0c74f51ULL;
  static const uint64_t static_value2 = 0x939677182bb6cf00ULL;
};

template<class ContainerAllocator>
struct DataType< ::robair_demo::Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robair_demo/Command";
  }

  static const char* value(const  ::robair_demo::Command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robair_demo::Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 move\n\
\n\
";
  }

  static const char* value(const  ::robair_demo::Command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robair_demo::Command_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robair_demo::Command_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.move);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Command_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robair_demo::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robair_demo::Command_<ContainerAllocator> & v) 
  {
    s << indent << "move: ";
    Printer<int8_t>::stream(s, indent + "  ", v.move);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBAIR_DEMO_MESSAGE_COMMAND_H

